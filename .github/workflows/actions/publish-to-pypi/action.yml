name: publish-to-pypi
description: Publish a project to pypi.org

inputs:
  project-name:
    description: The project name, which by convention is also the name of the folder at the root.
    required: true
  pypi-token:
    description: The pypi token to use for authentication
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup/upgrade the python tools
      shell: bash
      run: python -m pip install --upgrade pip wheel setuptools poetry==1.1.4 --user

    - name: Determine the minimum version for this release (the one in the pyproject.toml file)
      shell: bash
      id: get-minimum-version
      working-directory: ${{ inputs.project-name }}
      run: echo "::set-output name=minimum-version::$(${{ github.action_path }}/get-minimum-version.sh)"

    - name: Obtain the next release version
      id: get-next-version
      shell: bash
      working-directory: coveo-pypi-cli
      run: |
        python -m poetry install
        NEXT_VERSION="$(python -m poetry run pypi next-version ${{ inputs.project-name }} --minimum-version ${{ steps.get-minimum-version.outputs.minimum-version }})"
        echo "::set-output name=next-version::$NEXT_VERSION"

    - name: Push to pypi.org
      shell: bash
      working-directory: ${{ inputs.project-name }}
      run: |
        python -m poetry version ${{ steps.get-next-version.outputs.next-version }}
        python -m poetry build
        python -m poetry config pypi-token.pypi ${{ inputs.pypi-token }}
        python -m poetry publish --no-interaction

    - name: Tag repository
      shell: bash
      run: |
        TAG_NAME=${{ inputs.project-name }}.${{ steps.get-next-version.outputs.next-version }}
        echo "This release will be tagged as $TAG_NAME"
        # git tag --annotate --message="Automated tagging system" $TAG_NAME ${{ github.ref }}
        # git push origin $TAG_NAME
